---
layout:     post
title:      "Go Learning"
subtitle:   "Study Notes"
date:       2018-08-09 15:16:00
author:     "Jeremyhong"
header-img: "img/post-bg-kuaidi.jpg"
catalog: true
tags:
    - 学习笔记
    - Go
---

> 不要感冒


# Go基本语法学习整理
## 第一章
先写个Hello world
```go
package main

import "fmt"

func main(){
    fmt.Println("Hello,World!")
}
```
执行
```
$ go run hello.go
Hello,World!
```  
## 基本语法结构
1. 第一行需要导入包，每个项目都需要有一个main包，这是主程序执行的包，而主程序函数名必须叫做main。 
2. 当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）。  
## Go基础语法
### Go标记
1. 行分隔，无需分号
2. 标识符由字母或者下划线开头
3. 变量声明必须用空格隔开
```go
var age int
```
### Go 语言变量
#### 变量声明
1. var name type
2. 省略 var写法： name:=value
#### 常量声明
1. const identifier [type] = value
2. iota 自动增加
```go
ackage main

import "fmt"

func main() {
    const (
            a = iota   //0
            b          //1
            c          //2
            d = "ha"   //独立值，iota += 1
            e          //"ha"   iota += 1
            f = 100    //iota +=1
            g          //100  iota +=1
            h = iota   //7,恢复计数
            i          //8
    )
    fmt.Println(a,b,c,d,e,f,g,h,i)
}
```
最终输出结果为：
```go
0 1 2 ha ha 100 100 7 8
```
3. 条件循环语句 if后不需要加 括号
4. for循环语句
```go
//和 C 语言的 for 一样：
for init; condition; post { }

//和 C 的 while 一样：
for condition { }

//和 C 的 for(;;) 一样：
for { }
```  
6. go函数定义
```go
func function_name( [parameter list] ) [return_types] {
   函数体
}
```
8. 可以返回多个值
```go
func swap(x, y string) (string, string) {
   return y, x
}
```
9. 数组声明：
```go
var variable_name [SIZE] variable_type
```
10. 定义指针
```go
var var_name *var-type
```
11. Go不用对象啊，用结构体
```go
type struct_variable_type struct {
   member definition;
   member definition;
   ...
   member definition;
}
```
赋值方式
```go
// 创建一个新的结构体
    fmt.Println(Books{"Go 语言", "www.runoob.com", "Go 语言教程", 6495407})

    // 也可以使用 key => value 格式
    fmt.Println(Books{title: "Go 语言", author: "www.runoob.com", subject: "Go 语言教程", book_id: 6495407})
```
#### Go语言切片(Slice)
##### 定义切片
```go
var identifier []type
```
##### 或者使用make()函数
```go
var slice1 []type = make([]type, len)
```
也可以指定容量
```go
make([]T, length, capacity)
```
初始化切片s,是数组arr的引用
```go
s := arr[:] 
```
##### Go语言范围(range)
Go 语言中 range 关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。在数组和切片中它返回元素的索引和索引对应的值，在集合中返回 key-value 对的 key 值。
```go
package main
import "fmt"
func main() {
    //这是我们使用range去求一个slice的和。使用数组跟这个很类似
    nums := []int{2, 3, 4}
    sum := 0
    for _, num := range nums {
        sum += num
    }
    fmt.Println("sum:", sum)
    //在数组上使用range将传入index和值两个变量。上面那个例子我们不需要使用该元素的序号，所以我们使用空白符"_"省略了。有时侯我们确实需要知道它的索引。
    for i, num := range nums {
        if num == 3 {
            fmt.Println("index:", i)
        }
    }
    //range也可以用在map的键值对上。
    kvs := map[string]string{"a": "apple", "b": "banana"}
    for k, v := range kvs {
        fmt.Printf("%s -> %s\n", k, v)
    }
    //range也可以用来枚举Unicode字符串。第一个参数是字符的索引，第二个是字符（Unicode的值）本身。
    for i, c := range "go" {
        fmt.Println(i, c)
    }
}
```  
## Go语言 Map
定义Map
```go
/* 声明变量，默认 map 是 nil */
var map_variable map[key_data_type]value_data_type

/* 使用 make 函数 */
map_variable := make(map[key_data_type]value_data_type)
```  
## Go语言类型转换
```go
type_name(expression)
```  

## Go语言接口
接口的实现好像简单得有点尴尬
```go
/* 定义接口 */
type interface_name interface {
   method_name1 [return_type]
   method_name2 [return_type]
   method_name3 [return_type]
   ...
   method_namen [return_type]
}

/* 定义结构体 */
type struct_name struct {
   /* variables */
}

/* 实现接口方法 */
func (struct_name_variable struct_name) method_name1() [return_type] {
   /* 方法实现 */
}
...
func (struct_name_variable struct_name) method_namen() [return_type] {
   /* 方法实现*/
}
```

